/*
Log collect service

HTTP collect logs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// LoggerLogX struct for LoggerLogX
type LoggerLogX struct {
	Log string `json:"log"`
	Timestamp string `json:"timestamp"`
}

// NewLoggerLogX instantiates a new LoggerLogX object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggerLogX(log string, timestamp string) *LoggerLogX {
	this := LoggerLogX{}
	this.Log = log
	this.Timestamp = timestamp
	return &this
}

// NewLoggerLogXWithDefaults instantiates a new LoggerLogX object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggerLogXWithDefaults() *LoggerLogX {
	this := LoggerLogX{}
	return &this
}

// GetLog returns the Log field value
func (o *LoggerLogX) GetLog() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Log
}

// GetLogOk returns a tuple with the Log field value
// and a boolean to check if the value has been set.
func (o *LoggerLogX) GetLogOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Log, true
}

// SetLog sets field value
func (o *LoggerLogX) SetLog(v string) {
	o.Log = v
}

// GetTimestamp returns the Timestamp field value
func (o *LoggerLogX) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *LoggerLogX) GetTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *LoggerLogX) SetTimestamp(v string) {
	o.Timestamp = v
}

func (o LoggerLogX) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["log"] = o.Log
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableLoggerLogX struct {
	value *LoggerLogX
	isSet bool
}

func (v NullableLoggerLogX) Get() *LoggerLogX {
	return v.value
}

func (v *NullableLoggerLogX) Set(val *LoggerLogX) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggerLogX) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggerLogX) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggerLogX(val *LoggerLogX) *NullableLoggerLogX {
	return &NullableLoggerLogX{value: val, isSet: true}
}

func (v NullableLoggerLogX) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggerLogX) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

func GetBody(logs []string) []LoggerLogX {
	var ret []LoggerLogX
	for i := range logs {
		now := time.Now()
		ret = append(ret, LoggerLogX{
			Log: logs[i],
			Timestamp: now.Format("2006-01-02 15:04:05.000"),
		})
	}
	return ret
}
