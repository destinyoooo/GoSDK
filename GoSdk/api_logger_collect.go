/*
Log collect service

HTTP collect logs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// LoggerCollectApiService LoggerCollectApi service
type LoggerCollectApiService service

type ApiHttpCollectRequest struct {
	ctx context.Context
	ApiService *LoggerCollectApiService
	project string
	logStore string
	body *[]LoggerLogX
	logApiversion *string
	logBodyrawsize *interface{}
	accessKeyId *string
	accessKeySecret *string
}

const (
	LOGAPIVERSION = "v1.0.0"
)

// Body内容为json切片
func (r ApiHttpCollectRequest) Body(body []LoggerLogX) ApiHttpCollectRequest {
	r.body = &body
	return r
}
// cls版本,值v1.0.0
func (r ApiHttpCollectRequest) LogApiversion(logApiversion string) ApiHttpCollectRequest {
	if len(logApiversion) == 0 {
		*r.logApiversion = LOGAPIVERSION
	} else {
		r.logApiversion = &logApiversion
	}
	return r
}
// 上传日志大小,小于等于1024
func (r ApiHttpCollectRequest) LogBodyrawsize(logBodyrawsize interface{}) ApiHttpCollectRequest {
	r.logBodyrawsize = &logBodyrawsize
	return r
}
// Key ID
func (r ApiHttpCollectRequest) AccessKeyId(accessKeyId string) ApiHttpCollectRequest {
	r.accessKeyId = &accessKeyId
	return r
}
// Key Secret
func (r ApiHttpCollectRequest) AccessKeySecret(accessKeySecret string) ApiHttpCollectRequest {
	r.accessKeySecret = &accessKeySecret
	return r
}

func (r ApiHttpCollectRequest) Execute() (*LoggerResponse, *http.Response, error) {
	return r.ApiService.HttpCollectExecute(r)
}

/*
HttpCollect Http协议接入日志

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param project 项目名
 @param logStore 库名
 @return ApiHttpCollectRequest
*/
func (a *LoggerCollectApiService) HttpCollect(ctx context.Context, project string, logStore string) ApiHttpCollectRequest {
	return ApiHttpCollectRequest{
		ApiService: a,
		ctx: ctx,
		project: project,
		logStore: logStore,
	}
}

// Execute executes the request
//  @return LoggerResponse
func (a *LoggerCollectApiService) HttpCollectExecute(r ApiHttpCollectRequest) (*LoggerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LoggerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoggerCollectApiService.HttpCollect")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project}/log_store/{log_store}/putlog"
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterToString(r.project, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"log_store"+"}", url.PathEscape(parameterToString(r.logStore, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.logApiversion != nil {
		localVarHeaderParams["Log-Apiversion"] = parameterToString(*r.logApiversion, "")
	}
	if r.logBodyrawsize != nil {
		localVarHeaderParams["Log-Bodyrawsize"] = parameterToString(*r.logBodyrawsize, "")
	}
	if r.accessKeyId != nil {
		localVarHeaderParams["AccessKeyId"] = parameterToString(*r.accessKeyId, "")
	}
	if r.accessKeySecret != nil {
		localVarHeaderParams["AccessKeySecret"] = parameterToString(*r.accessKeySecret, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
