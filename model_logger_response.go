/*
Log collect service

HTTP collect logs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LoggerResponse struct for LoggerResponse
type LoggerResponse struct {
	Code int32 `json:"code"`
	Message string `json:"message"`
}

// NewLoggerResponse instantiates a new LoggerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggerResponse(code int32, message string) *LoggerResponse {
	this := LoggerResponse{}
	this.Code = code
	this.Message = message
	return &this
}

// NewLoggerResponseWithDefaults instantiates a new LoggerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggerResponseWithDefaults() *LoggerResponse {
	this := LoggerResponse{}
	return &this
}

// GetCode returns the Code field value
func (o *LoggerResponse) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *LoggerResponse) GetCodeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *LoggerResponse) SetCode(v int32) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *LoggerResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *LoggerResponse) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *LoggerResponse) SetMessage(v string) {
	o.Message = v
}

func (o LoggerResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableLoggerResponse struct {
	value *LoggerResponse
	isSet bool
}

func (v NullableLoggerResponse) Get() *LoggerResponse {
	return v.value
}

func (v *NullableLoggerResponse) Set(val *LoggerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggerResponse(val *LoggerResponse) *NullableLoggerResponse {
	return &NullableLoggerResponse{value: val, isSet: true}
}

func (v NullableLoggerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


